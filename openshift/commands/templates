#!/bin/bash

# https://docs.openshift.com/container-platform/3.5/dev_guide/templates.html

# Visualizar todos os templates
oc get templates -n openshift

# Visualizar um template no formato YAML 
oc get template cakephp-mysql-example -o yaml -n openshift

# Jogar para um arquivo 
oc get template cakephp-mysql-example -o yaml -n openshift  > cakephp.yaml
oc get template dotnet-example -o yaml -n openshift > dotnet-example.yaml

# Editar um template no formato
oc edit template cakephp-mysql-example -n openshift

# Visualiza/Processa um template de um arquivo que está em um arquivo ou caminho remoto
# O process difere do "GET" pq ele pode alterar o resultado com novos valores para os parametros
# Ele tb obriga a passar os parametros obrigatorios
oc process -f "http://bit.ly/openshift-gogs-persistent-template" --param=HOSTNAME=gogs-demo.yourdomain.com -o yaml
oc process -f gogs-persistent-template.yaml --param=HOSTNAME=gogs-demo.yourdomain.com -o yaml

# Converte uma saida em um template (mas não cria no catalogo, apenas processa e exibe)
cat template.json | oc process -f -

# Visualizar um template existente no formato yaml ou json
oc process cakephp-mysql-example -n openshift -o yaml
oc process cakephp-mysql-example -n openshift -o json

# Visualizar os parametros de um template
oc process cakephp-mysql-example --parameters -n openshift

# Importar um template de um arquivo ou url remota para o catalogo diretamente
oc process -f FILE_OR_URL | oc create -f -

# Processa um template adicionando o mesmo label para todos os objetos
oc process -f template.json -l name=mytemplate

# Convert template stored in different namespace into a resource list
oc process openshift//foo

# Criar uma aplicação com base em um template usando new-app parametrizado
oc new-app mongodb-ephemeral --name mongo -p MONGODB_USER=okd -p MONGODB_PASSWORD=teste -p MONGODB_DATABASE=okd -p MONGODB_ADMIN_PASSWORD=1234

# Testando a aplicação (abrir o pod pelo terminal e digitar)
mongo okd -u okd -p teste --authenticationDatabase=okd
show tables
db.alunos.insert({"nome" : "Hector", "sobrenome" : "Vido Silva", "cargo" : "Construtor"}) 
db.alunos.findOne()

# Cria o arquivo que vai ser o template
vi /files/template.yaml

# Conteúdo de um template simples (obter do arquivo abaixo)
./templates.yaml

# Criar o template baseado no arquivo e deixa-lo disponível no catalogo
oc create -f /files/template.yaml -n openshift

# Verifica se os parametros foram criados
oc process spentbook-importer --parameters -n openshift

# Deletar um template
 oc delete template spentbook-importer -n openshift